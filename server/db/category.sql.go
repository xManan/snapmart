// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: category.sql

package db

import (
	"context"
	"database/sql"
)

const getCategory = `-- name: GetCategory :one
SELECT category_id, category_name, category_img_path, category_parent_id FROM categories
WHERE category_id = ? AND category_parent_id IS NULL LIMIT 1
`

func (q *Queries) GetCategory(ctx context.Context, categoryID int64) (Category, error) {
	row := q.queryRow(ctx, q.getCategoryStmt, getCategory, categoryID)
	var i Category
	err := row.Scan(
		&i.CategoryID,
		&i.CategoryName,
		&i.CategoryImgPath,
		&i.CategoryParentID,
	)
	return i, err
}

const getCategoryName = `-- name: GetCategoryName :one
SELECT category_name FROM categories
WHERE category_id = ? LIMIT 1
`

func (q *Queries) GetCategoryName(ctx context.Context, categoryID int64) (string, error) {
	row := q.queryRow(ctx, q.getCategoryNameStmt, getCategoryName, categoryID)
	var category_name string
	err := row.Scan(&category_name)
	return category_name, err
}

const listCategories = `-- name: ListCategories :many
SELECT category_id, category_name, category_img_path, category_parent_id FROM categories
ORDER BY category_name
`

func (q *Queries) ListCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.query(ctx, q.listCategoriesStmt, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.CategoryID,
			&i.CategoryName,
			&i.CategoryImgPath,
			&i.CategoryParentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSubcategories = `-- name: ListSubcategories :many
SELECT category_id, category_name, category_img_path, category_parent_id FROM 
categories WHERE category_parent_id = ?
`

func (q *Queries) ListSubcategories(ctx context.Context, categoryParentID sql.NullInt64) ([]Category, error) {
	rows, err := q.query(ctx, q.listSubcategoriesStmt, listSubcategories, categoryParentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.CategoryID,
			&i.CategoryName,
			&i.CategoryImgPath,
			&i.CategoryParentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
