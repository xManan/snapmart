// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.getCategoryStmt, err = db.PrepareContext(ctx, getCategory); err != nil {
		return nil, fmt.Errorf("error preparing query GetCategory: %w", err)
	}
	if q.getCategoryNameStmt, err = db.PrepareContext(ctx, getCategoryName); err != nil {
		return nil, fmt.Errorf("error preparing query GetCategoryName: %w", err)
	}
	if q.getProductStmt, err = db.PrepareContext(ctx, getProduct); err != nil {
		return nil, fmt.Errorf("error preparing query GetProduct: %w", err)
	}
	if q.listCategoriesStmt, err = db.PrepareContext(ctx, listCategories); err != nil {
		return nil, fmt.Errorf("error preparing query ListCategories: %w", err)
	}
	if q.listProductsByCategoryIdStmt, err = db.PrepareContext(ctx, listProductsByCategoryId); err != nil {
		return nil, fmt.Errorf("error preparing query ListProductsByCategoryId: %w", err)
	}
	if q.listProductsWithCategoryStmt, err = db.PrepareContext(ctx, listProductsWithCategory); err != nil {
		return nil, fmt.Errorf("error preparing query ListProductsWithCategory: %w", err)
	}
	if q.listSubcategoriesStmt, err = db.PrepareContext(ctx, listSubcategories); err != nil {
		return nil, fmt.Errorf("error preparing query ListSubcategories: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.getCategoryStmt != nil {
		if cerr := q.getCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCategoryStmt: %w", cerr)
		}
	}
	if q.getCategoryNameStmt != nil {
		if cerr := q.getCategoryNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCategoryNameStmt: %w", cerr)
		}
	}
	if q.getProductStmt != nil {
		if cerr := q.getProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProductStmt: %w", cerr)
		}
	}
	if q.listCategoriesStmt != nil {
		if cerr := q.listCategoriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listCategoriesStmt: %w", cerr)
		}
	}
	if q.listProductsByCategoryIdStmt != nil {
		if cerr := q.listProductsByCategoryIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listProductsByCategoryIdStmt: %w", cerr)
		}
	}
	if q.listProductsWithCategoryStmt != nil {
		if cerr := q.listProductsWithCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listProductsWithCategoryStmt: %w", cerr)
		}
	}
	if q.listSubcategoriesStmt != nil {
		if cerr := q.listSubcategoriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listSubcategoriesStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                           DBTX
	tx                           *sql.Tx
	getCategoryStmt              *sql.Stmt
	getCategoryNameStmt          *sql.Stmt
	getProductStmt               *sql.Stmt
	listCategoriesStmt           *sql.Stmt
	listProductsByCategoryIdStmt *sql.Stmt
	listProductsWithCategoryStmt *sql.Stmt
	listSubcategoriesStmt        *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                           tx,
		tx:                           tx,
		getCategoryStmt:              q.getCategoryStmt,
		getCategoryNameStmt:          q.getCategoryNameStmt,
		getProductStmt:               q.getProductStmt,
		listCategoriesStmt:           q.listCategoriesStmt,
		listProductsByCategoryIdStmt: q.listProductsByCategoryIdStmt,
		listProductsWithCategoryStmt: q.listProductsWithCategoryStmt,
		listSubcategoriesStmt:        q.listSubcategoriesStmt,
	}
}
